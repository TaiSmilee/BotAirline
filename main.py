from flask import Flask, request, jsonify
from flask_cors import CORS
import requests

app = Flask(__name__)
CORS(app, supports_credentials=True)

# API Keys
AVIATION_API_KEY = "7637add89f019adafaf3d96030a66f6d"
SKYSCANNER_API_KEY = "01fb0a41d2msh011b5606760bb91p1617b0jsn910dff2ba870"

# Danh s√°ch s√¢n bay h·ª£p l·ªá
VALID_AIRPORTS = {"HAN": "N·ªôi B√†i", "SGN": "T√¢n S∆°n Nh·∫•t", "DAD": "ƒê√† N·∫µng"}
VALID_TIMES = ["S√ÅNG", "CHI·ªÄU", "T·ªêI"]

# B·ªô nh·ªõ t·∫°m cho ng∆∞·ªùi d√πng
user_sessions = {}

@app.route("/chat", methods=["POST"])
def chat():
    user_id = request.json.get("user_id")
    user_message = request.json.get("message", "").strip().upper()

    print(f"üõ† Received request from {user_id}: {user_message}")

    if not user_id or not user_message:
        return jsonify({"bot": "Xin h√£y nh·∫≠p th√¥ng tin h·ª£p l·ªá!"})

    # Ki·ªÉm tra n·∫øu user ch∆∞a c√≥ session
    if user_id not in user_sessions:
        user_sessions[user_id] = {"step": 1}
        print(f"üîπ Created new session for {user_id}")

    session = user_sessions[user_id]
    print(f"üõ† Current session state: {session}")

    # === B∆Ø·ªöC 1: Ch·ªçn ƒëi·ªÉm xu·∫•t ph√°t ===
    if session["step"] == 1:
        if user_message not in VALID_AIRPORTS:
            return jsonify({"bot": "Vui l√≤ng nh·∫≠p m√£ s√¢n bay h·ª£p l·ªá (HAN, SGN, DAD)."})

        session["departure"] = user_message
        session["step"] += 1
        return jsonify({"bot": "B·∫°n mu·ªën bay ƒë·∫øn ƒë√¢u? (HAN, SGN, DAD)"})

    # === B∆Ø·ªöC 2: Ch·ªçn ƒëi·ªÉm ƒë·∫øn ===
    elif session["step"] == 2:
        if user_message not in VALID_AIRPORTS:
            return jsonify({"bot": "Vui l√≤ng nh·∫≠p m√£ s√¢n bay h·ª£p l·ªá (HAN, SGN, DAD)."})
        
        if user_message == session["departure"]:
            return jsonify({"bot": "ƒêi·ªÉm ƒë·∫øn kh√¥ng th·ªÉ tr√πng v·ªõi ƒëi·ªÉm ƒëi! Vui l√≤ng nh·∫≠p l·∫°i."})

        session["arrival"] = user_message
        session["step"] += 1
        return jsonify({"bot": "B·∫°n mu·ªën bay v√†o bu·ªïi n√†o? (S√°ng, Chi·ªÅu, T·ªëi)"})

    # === B∆Ø·ªöC 3: Ch·ªçn th·ªùi gian bay ===
    elif session["step"] == 3:
        if user_message not in VALID_TIMES:
            return jsonify({"bot": "Vui l√≤ng nh·∫≠p 'S√°ng', 'Chi·ªÅu' ho·∫∑c 'T·ªëi'."})

        session["time"] = user_message
        session["step"] += 1
        return jsonify({"bot": "B·∫°n mu·ªën xem t·∫•t c·∫£ chuy·∫øn bay hay ch·ªâ chuy·∫øn r·∫ª nh·∫•t? (T·∫•t c·∫£ / Chuy·∫øn bay r·∫ª nh·∫•t)"})

    # === B∆Ø·ªöC 4: Ch·ªçn lo·∫°i chuy·∫øn bay ===
    elif session["step"] == 4:
        user_message = user_message.lower()
        if user_message not in ["t·∫•t c·∫£", "chuy·∫øn bay r·∫ª nh·∫•t"]:
            return jsonify({"bot": "Vui l√≤ng nh·∫≠p 'T·∫•t c·∫£' ho·∫∑c 'Chuy·∫øn bay r·∫ª nh·∫•t'."})

        session["option"] = user_message
        session["step"] +=1

        print(f"üîπ Fetching flights from {session['departure']} to {session['arrival']}")

        # === G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin chuy·∫øn bay ===
        aviation_url = f"http://api.aviationstack.com/v1/flights?access_key={AVIATION_API_KEY}&dep_iata={session['departure']}&arr_iata={session['arrival']}"
        try:
            aviation_response = requests.get(aviation_url).json()
            print(f"‚úÖ Aviation API response: {aviation_response}")
        except Exception as e:
            print(f"‚ùå Error calling Aviation API: {e}")
            return jsonify({"bot": "L·ªói khi l·∫•y d·ªØ li·ªáu chuy·∫øn bay. Vui l√≤ng th·ª≠ l·∫°i sau."})

        if "data" not in aviation_response or not aviation_response["data"]:
            return jsonify({"bot": "Kh√¥ng t√¨m th·∫•y chuy·∫øn bay n√†o v·ªõi th√¥ng tin n√†y!"})

        flights = aviation_response["data"]

        # === G·ªçi API l·∫•y gi√° v√© ===
        skyscanner_url = f"https://skyscanner44.p.rapidapi.com/search?from={session['departure']}&to={session['arrival']}&depart=2024-04-10&return=2024-04-15&adults=1&currency=VND"
        headers = {"X-RapidAPI-Key": SKYSCANNER_API_KEY}
        try:
            skyscanner_response = requests.get(skyscanner_url, headers=headers).json()
            print(f"‚úÖ Skyscanner API response: {skyscanner_response}")
        except Exception as e:
            print(f"‚ùå Error calling Skyscanner API: {e}")
            return jsonify({"bot": "L·ªói khi l·∫•y d·ªØ li·ªáu gi√° v√©. Vui l√≤ng th·ª≠ l·∫°i sau."})

        if "itineraries" not in skyscanner_response:
            return jsonify({"bot": "Hi·ªán t·∫°i kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi√° v√©, vui l√≤ng th·ª≠ l·∫°i sau."})

        # X·ª≠ l√Ω d·ªØ li·ªáu gi√° v√©
        flight_prices = {}
        for itinerary in skyscanner_response.get("itineraries", []):
            legs = itinerary.get("legs", [])
            if legs and "id" in legs[0]:
                price = itinerary.get("pricing_options", [{}])[0].get("price", {}).get("amount", None)
                if price is not None:
                    flight_prices[legs[0]["id"]] = price

        # S·∫Øp x·∫øp chuy·∫øn bay theo gi√° v√©
        flights_sorted = sorted(flights, key=lambda x: flight_prices.get(x.get('flight', {}).get('iata', ''), float('inf')))

        if not flights_sorted:
            return jsonify({"bot": "Kh√¥ng c√≥ chuy·∫øn bay ph√π h·ª£p v·ªõi th√¥ng tin c·ªßa b·∫°n."})

        # === Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng ===
        if session["option"] == "chuy·∫øn bay r·∫ª nh·∫•t":
            cheapest_flight = flights_sorted[0]
            return jsonify({
                "bot": f"‚úà Chuy·∫øn bay r·∫ª nh·∫•t:\nH√£ng: {cheapest_flight.get('airline', {}).get('name', 'Kh√¥ng r√µ')}\nGi√°: {flight_prices.get(cheapest_flight.get('flight', {}).get('iata', ''), 'Kh√¥ng c√≥ th√¥ng tin')} VND"
            })
        else:
            top_3_flights = flights_sorted[:3]
            return jsonify({
                "bot": "\n\n".join([
                    f"‚úà {f.get('flight', {}).get('iata', 'N/A')} - {f.get('airline', {}).get('name', 'Kh√¥ng r√µ')} - {flight_prices.get(f.get('flight', {}).get('iata', ''), 'Kh√¥ng c√≥ th√¥ng tin')} VND"
                    for f in top_3_flights
                ])
            })

    return jsonify({"bot": "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n!"})

if __name__ == "__main__":
    app.run(debug=True)
